/*
 * Transport Operator MaaS Provider API
 * An API between MaaS providers and transport operators for booking trips and corresponding assets. <p>The documentation (examples, process flows and sequence diagrams) can be found at <a href=\"https://github.com/TOMP-WG/TOMP-API/\">github</a>.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client

import javax.annotation.Generated

@Generated(value = ["io.swagger.codegen.v3.generators.java.JavaClientCodegen"], date = "2020-03-24T12:09:05.155Z[GMT]")
class ApiException : Exception {
    /**
     * Get the HTTP status code.
     *
     * @return HTTP status code
     */
    var code = 0
        private set

    /**
     * Get the HTTP response headers.
     *
     * @return A map of list of string
     */
    var responseHeaders: Map<String, List<String>>? = null
        private set

    /**
     * Get the HTTP response body.
     *
     * @return Response body in the form of string
     */
    var responseBody: String? = null
        private set

    constructor()
    constructor(throwable: Throwable?) : super(throwable)
    constructor(message: String?) : super(message)

    @JvmOverloads
    constructor(
        message: String?,
        throwable: Throwable?,
        code: Int,
        responseHeaders: Map<String, List<String>>?,
        responseBody: String? = null
    ) : super(message, throwable) {
        this.code = code
        this.responseHeaders = responseHeaders
        this.responseBody = responseBody
    }

    constructor(message: String?, code: Int, responseHeaders: Map<String, List<String>>?, responseBody: String?) : this(
        message,
        null as Throwable?,
        code,
        responseHeaders,
        responseBody
    )

    constructor(code: Int, responseHeaders: Map<String, List<String>>?, responseBody: String?) : this(
        null as String?,
        null as Throwable?,
        code,
        responseHeaders,
        responseBody
    )

    constructor(code: Int, message: String?) : super(message) {
        this.code = code
    }

    constructor(code: Int, message: String?, responseHeaders: Map<String, List<String>>?, responseBody: String?) : this(code, message) {
        this.responseHeaders = responseHeaders
        this.responseBody = responseBody
    }
}
