package io.swagger.model

import com.fasterxml.jackson.annotation.JsonProperty
import io.swagger.v3.oas.annotations.media.Schema
import org.springframework.validation.annotation.Validated
import java.util.Objects
import javax.annotation.Generated

/**
 * An error that the service may send, e.g. in case of invalid input, missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
 */
@Schema(description = "An error that the service may send, e.g. in case of invalid input, missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.")
@Validated
@Generated(value = ["io.swagger.codegen.v3.generators.java.SpringCodegen"], date = "2021-12-10T11:36:21.130Z[GMT]")
class Error {
    /**
     * The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.
     * @return errorcode
     */
    @get:Schema(description = "The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.")
    @JsonProperty("errorcode")
    var errorcode: Int? = null

    /**
     * The category of this type of error.
     * @return type
     */
    @JvmField
    @get:Schema(description = "The category of this type of error.")
    @JsonProperty("type")
    var type: String? = null

    /**
     * A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language
     * @return title
     */
    @JvmField
    @get:Schema(description = "A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language")
    @JsonProperty("title")
    var title: String? = null

    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @return status
     */
    @JvmField
    @get:Schema(description = "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.")
    @JsonProperty("status")
    var status: Int? = null

    /**
     * A human-readable explanation specific to this occurrence of the problem, could match Content-Language
     * @return detail
     */
    @get:Schema(description = "A human-readable explanation specific to this occurrence of the problem, could match Content-Language")
    @JsonProperty("detail")
    var detail: String? = null

    /**
     * A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
     * @return instance
     */
    @get:Schema(description = "A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.")
    @JsonProperty("instance")
    var instance: String? = null
    fun errorcode(errorcode: Int?): Error {
        this.errorcode = errorcode
        return this
    }

    fun type(type: String?): Error {
        this.type = type
        return this
    }

    fun title(title: String?): Error {
        this.title = title
        return this
    }

    fun status(status: Int?): Error {
        this.status = status
        return this
    }

    fun detail(detail: String?): Error {
        this.detail = detail
        return this
    }

    fun instance(instance: String?): Error {
        this.instance = instance
        return this
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val error = o as Error
        return errorcode == error.errorcode && type == error.type && title == error.title && status == error.status && detail == error.detail && instance == error.instance
    }

    override fun hashCode(): Int {
        return Objects.hash(errorcode, type, title, status, detail, instance)
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class Error {\n")
        sb.append("    errorcode: ").append(toIndentedString(errorcode)).append("\n")
        sb.append("    type: ").append(toIndentedString(type)).append("\n")
        sb.append("    title: ").append(toIndentedString(title)).append("\n")
        sb.append("    status: ").append(toIndentedString(status)).append("\n")
        sb.append("    detail: ").append(toIndentedString(detail)).append("\n")
        sb.append("    instance: ").append(toIndentedString(instance)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}
